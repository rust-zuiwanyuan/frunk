var searchIndex = {};
searchIndex["frunk"] = {"doc":"Frunk: generic functional programming toolbelt for Rust","items":[[0,"semigroup","frunk","Module for holding the Semigroup typeclass definition and typeclass instances",null,null],[3,"Max","frunk::semigroup","Wrapper type for types that are ordered and can have a Max combination",null,null],[12,"0","","",0,null],[3,"Min","","Wrapper type for types that are ordered and can have a Min combination",null,null],[12,"0","","",1,null],[3,"Product","","Wrapper type for types that can have a Product combination",null,null],[12,"0","","",2,null],[3,"All","","Wrapper type for boolean that acts as a bitwise && combination",null,null],[12,"0","","",3,null],[3,"Any","","Wrapper type for boolean that acts as a bitwise || combination",null,null],[12,"0","","",4,null],[5,"combine_n","","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all_option","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[8,"Semigroup","","A Semigroup is a class of thing that has a definable combine operation",null,null],[10,"combine","","Associative operation taking which combines two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"max"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"min"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"all"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"ordering"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"monoid","frunk","Module for holding Monoid typeclass definitions and default implementations",null,null],[5,"combine_n","frunk::monoid","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[8,"Monoid","","A Monoid is a Sempigroup that has an empty/ zero value",null,null],[10,"empty","","For a given Monoid, returns its empty/zero value",6,{"inputs":[],"output":{"name":"self"}}],[11,"empty","frunk::semigroup","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[0,"validated","frunk","Module for holding Validated logic",null,null],[4,"Validated","frunk::validated","A Validated is either an Ok holding an HList or an Err, holding a vector of collected errors.",null,null],[13,"Ok","","",7,null],[13,"Err","","",7,null],[8,"IntoValidated","","Trait for \"lifting\" a given type into a Validated",null,null],[10,"into_validated","","Consumes the current Result into a Validated so that we can begin chaining",8,{"inputs":[{"name":"self"}],"output":{"name":"validated"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"validated"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"ordering"}}],[11,"is_ok","","Returns true if this validation is Ok, false otherwise",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if this validation is Err, false otherwise",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_result","","Turns this Validated into a Result.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add","","",7,null],[11,"add","","",7,null]],"paths":[[3,"Max"],[3,"Min"],[3,"Product"],[3,"All"],[3,"Any"],[8,"Semigroup"],[8,"Monoid"],[4,"Validated"],[8,"IntoValidated"]]};
searchIndex["frunk_core"] = {"doc":"","items":[[0,"hlist","frunk_core","Module that holds HList data structures and implementations",null,null],[3,"HNil","frunk_core::hlist","Represents the right-most end of a heterogeneous list",null,null],[3,"HCons","","Represents the most basic non-empty HList. Its value is held in `head` while its tail is another HList.",null,null],[12,"head","","",0,null],[12,"tail","","",0,null],[3,"Here","","Largely lifted from https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30 Used as an index into an `HList`.",null,null],[3,"There","","Used as an index into an `HList`.",null,null],[5,"h_cons","","Takes an element and an Hlist and returns another one with the element prepended to the original list. The original list is consumed",null,{"inputs":[{"name":"h"},{"name":"t"}],"output":{"name":"hcons"}}],[8,"HList","","Typeclass for HList-y behaviour",null,null],[10,"length","","Returns the length of a given HList",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"prepend","","Prepends an item to the current HList",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"hcons"}}],[8,"Selector","","Trait for retrieving an HList element by type",null,null],[10,"get","","Allows you to retrieve a unique type from an HList",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[8,"IntoTuple2","","Trait for things that can be turned into a Tuple 2 (pair)",null,null],[16,"HeadType","","The 0 element in the output tuple",3,null],[16,"TailOutput","","The 1 element in the output tuple",3,null],[10,"into_tuple2","","Turns an HList into nested Tuple2s, which are less troublesome to pattern match and have a nicer type signature.",3,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hnil"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"ordering"}}],[11,"length","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hcons"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"ordering"}}],[11,"length","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pop","","Returns the head of the list and the tail of the list as a tuple2. The original list is consumed",0,null],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"rhs"}}],[11,"add","","",0,null],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromtail"}}],[11,"into_tuple2","","",0,null],[11,"into_tuple2","","",0,null],[0,"generic","frunk_core","",null,null],[5,"from_generic","frunk_core::generic","Given a generic Representation of an A, returns A",null,{"inputs":[{"name":"repr"}],"output":{"name":"a"}}],[5,"into_generic","","Given an A, returns its generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"repr"}}],[5,"convert_from","","Converts one type into another assuming they have the same generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"b"}}],[8,"Generic","","A trait that converts from a type to a generic representation",null,null],[10,"into","","Go from something to Repr",5,{"inputs":[{"name":"self"}],"output":{"name":"repr"}}],[10,"from","","Go from Repr to something",5,{"inputs":[{"name":"repr"}],"output":{"name":"self"}}],[14,"hlist","frunk_core","Returns an `HList` based on the values passed in.",null,null],[14,"hlist_pat","","Macro for pattern-matching on HLists.",null,null],[14,"Hlist","","Returns a type signature for an HList of the provided types",null,null]],"paths":[[3,"HCons"],[8,"HList"],[8,"Selector"],[8,"IntoTuple2"],[3,"HNil"],[8,"Generic"]]};
searchIndex["frunk_derives"] = {"doc":"","items":[[5,"generic","frunk_derives","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"str"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",11,null],[12,"tts","","The delimited sequence of token trees",11,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",12,null],[12,"tts","","",12,null],[3,"DeriveInput","","",null,null],[12,"ident","","",13,null],[12,"vis","","",13,null],[12,"attrs","","",13,null],[12,"generics","","",13,null],[12,"body","","",13,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",14,null],[12,"types","","The type parameters for this path segment, if present.",14,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",14,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",15,null],[12,"ty","","",15,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",16,null],[12,"abi","","",16,null],[12,"lifetimes","","",16,null],[12,"inputs","","",16,null],[12,"output","","",16,null],[12,"variadic","","",16,null],[3,"MutTy","","",null,null],[12,"ty","","",17,null],[12,"mutability","","",17,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",18,null],[12,"output","","`C`",18,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",19,null],[12,"segments","","The segments in the path: the things separated by `::`.",19,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",20,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",20,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",21,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",21,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",22,null],[12,"position","","",22,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",23,null],[12,"ty","","",23,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",24,null],[13,"Inner","","",24,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",25,null],[13,"List","","List meta item.",25,null],[13,"NameValue","","Name value meta item.",25,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",26,null],[13,"Literal","","A literal.",26,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",27,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",27,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",27,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",27,null],[13,"Cast","","A cast (`foo as f64`)",27,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",27,null],[13,"Index","","An indexing operation (`foo[2]`)",27,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",27,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",27,null],[4,"VariantData","","",null,null],[13,"Struct","","",28,null],[13,"Tuple","","",28,null],[13,"Unit","","",28,null],[4,"Visibility","","",null,null],[13,"Public","","",29,null],[13,"Crate","","",29,null],[13,"Restricted","","",29,null],[13,"Inherited","","",29,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",30,null],[13,"Maybe","","",30,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",31,null],[13,"Region","","",31,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",32,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",32,null],[13,"EqPredicate","","An equality predicate (unsupported)",32,null],[4,"FloatTy","","",null,null],[13,"F32","","",33,null],[13,"F64","","",33,null],[13,"Unsuffixed","","",33,null],[4,"IntTy","","",null,null],[13,"Isize","","",34,null],[13,"I8","","",34,null],[13,"I16","","",34,null],[13,"I32","","",34,null],[13,"I64","","",34,null],[13,"Usize","","",34,null],[13,"U8","","",34,null],[13,"U16","","",34,null],[13,"U32","","",34,null],[13,"U64","","",34,null],[13,"Unsuffixed","","",34,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",35,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",35,null],[13,"Byte","","A byte char (`b'f'`)",35,null],[13,"Char","","A character literal (`'a'`)",35,null],[13,"Int","","An integer literal (`1`)",35,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",35,null],[13,"Bool","","A boolean literal",35,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",36,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",36,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",37,null],[13,"Minus","","",37,null],[13,"Star","","",37,null],[13,"Slash","","",37,null],[13,"Percent","","",37,null],[13,"Caret","","",37,null],[13,"And","","",37,null],[13,"Or","","",37,null],[13,"Shl","","",37,null],[13,"Shr","","",37,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",38,null],[13,"Bracket","","A square bracket: `[` or `]`",38,null],[13,"Brace","","A curly brace: `{` or `}`",38,null],[4,"Token","","",null,null],[13,"Eq","","",39,null],[13,"Lt","","",39,null],[13,"Le","","",39,null],[13,"EqEq","","",39,null],[13,"Ne","","",39,null],[13,"Ge","","",39,null],[13,"Gt","","",39,null],[13,"AndAnd","","",39,null],[13,"OrOr","","",39,null],[13,"Not","","",39,null],[13,"Tilde","","",39,null],[13,"BinOp","","",39,null],[13,"BinOpEq","","",39,null],[13,"At","","",39,null],[13,"Dot","","",39,null],[13,"DotDot","","",39,null],[13,"DotDotDot","","",39,null],[13,"Comma","","",39,null],[13,"Semi","","",39,null],[13,"Colon","","",39,null],[13,"ModSep","","",39,null],[13,"RArrow","","",39,null],[13,"LArrow","","",39,null],[13,"FatArrow","","",39,null],[13,"Pound","","",39,null],[13,"Dollar","","",39,null],[13,"Question","","",39,null],[13,"Literal","","",39,null],[13,"Ident","","",39,null],[13,"Underscore","","",39,null],[13,"Lifetime","","",39,null],[13,"DocComment","","",39,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",40,null],[13,"Delimited","","A delimited sequence of token trees",40,null],[4,"Body","","",null,null],[13,"Enum","","",41,null],[13,"Struct","","",41,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",42,null],[13,"Sub","","The `-` operator (subtraction)",42,null],[13,"Mul","","The `*` operator (multiplication)",42,null],[13,"Div","","The `/` operator (division)",42,null],[13,"Rem","","The `%` operator (modulus)",42,null],[13,"And","","The `&&` operator (logical and)",42,null],[13,"Or","","The `||` operator (logical or)",42,null],[13,"BitXor","","The `^` operator (bitwise xor)",42,null],[13,"BitAnd","","The `&` operator (bitwise and)",42,null],[13,"BitOr","","The `|` operator (bitwise or)",42,null],[13,"Shl","","The `<<` operator (shift left)",42,null],[13,"Shr","","The `>>` operator (shift right)",42,null],[13,"Eq","","The `==` operator (equality)",42,null],[13,"Lt","","The `<` operator (less than)",42,null],[13,"Le","","The `<=` operator (less than or equal to)",42,null],[13,"Ne","","The `!=` operator (not equal to)",42,null],[13,"Ge","","The `>=` operator (greater than or equal to)",42,null],[13,"Gt","","The `>` operator (greater than)",42,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",43,null],[13,"Not","","The `!` operator for logical inversion",43,null],[13,"Neg","","The `-` operator for negation",43,null],[4,"Abi","","",null,null],[13,"Named","","",44,null],[13,"Rust","","",44,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",45,null],[13,"Ty","","Everything else",45,null],[4,"Mutability","","",null,null],[13,"Mutable","","",46,null],[13,"Immutable","","",46,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",47,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",47,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",48,null],[13,"Array","","A fixed length array (`[T; n]`)",48,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",48,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",48,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",48,null],[13,"Never","","The never type (`!`)",48,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",48,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",48,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",48,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",48,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",48,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",48,null],[13,"Mac","","A macro in the type position.",48,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",49,null],[13,"Normal","","",49,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fields","","",28,null],[11,"fields_mut","","",28,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",51,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",53,null],[11,"new","","",53,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"from","","",35,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",35,null],[11,"from","","",35,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"from","","",35,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",35,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"op","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"from","","",19,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"none","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",14,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",45,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
